// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`(AclStatement) basic 1`] = `
Node {
  "body": Array [
    Node {
      "cidr": undefined,
      "type": "Ip",
      "value": "127.0.0.1",
    },
    Node {
      "cidr": undefined,
      "type": "Ip",
      "value": "localhost",
    },
  ],
  "id": Node {
    "name": "aaa",
    "type": "Identifier",
  },
  "type": "AclStatement",
}
`;

exports[`(AddStatement) TODO: cover operand types
addition 1`] = `
Node {
  "left": Node {
    "base": Node {
      "name": "var",
      "type": "Identifier",
    },
    "member": Node {
      "name": "vacel",
      "type": "Identifier",
    },
    "type": "Member",
  },
  "operator": "+=",
  "right": Node {
    "type": "StringLiteral",
    "value": "\\"vacel\\"",
  },
  "type": "AddStatement",
}
`;

exports[`(AddStatement) assignment 1`] = `
Node {
  "left": Node {
    "base": Node {
      "name": "var",
      "type": "Identifier",
    },
    "member": Node {
      "name": "vacel",
      "type": "Identifier",
    },
    "type": "Member",
  },
  "operator": "=",
  "right": Node {
    "type": "StringLiteral",
    "value": "\\"vacel\\"",
  },
  "type": "AddStatement",
}
`;

exports[`(AddStatement) division 1`] = `
Node {
  "left": Node {
    "base": Node {
      "name": "var",
      "type": "Identifier",
    },
    "member": Node {
      "name": "vacel",
      "type": "Identifier",
    },
    "type": "Member",
  },
  "operator": "/=",
  "right": Node {
    "type": "StringLiteral",
    "value": "\\"vacel\\"",
  },
  "type": "AddStatement",
}
`;

exports[`(AddStatement) multiplication 1`] = `
Node {
  "left": Node {
    "base": Node {
      "name": "var",
      "type": "Identifier",
    },
    "member": Node {
      "name": "vacel",
      "type": "Identifier",
    },
    "type": "Member",
  },
  "operator": "*=",
  "right": Node {
    "type": "StringLiteral",
    "value": "\\"vacel\\"",
  },
  "type": "AddStatement",
}
`;

exports[`(AddStatement) substraction 1`] = `
Node {
  "left": Node {
    "base": Node {
      "name": "var",
      "type": "Identifier",
    },
    "member": Node {
      "name": "vacel",
      "type": "Identifier",
    },
    "type": "Member",
  },
  "operator": "-=",
  "right": Node {
    "type": "StringLiteral",
    "value": "\\"vacel\\"",
  },
  "type": "AddStatement",
}
`;

exports[`(BackendStatement) basic 1`] = `
Node {
  "body": Array [
    Node {
      "key": "connect_timeout",
      "type": "BackendDefinition",
      "value": Node {
        "type": "DurationLiteral",
        "value": "1s",
      },
    },
    Node {
      "key": "dynamic",
      "type": "BackendDefinition",
      "value": Node {
        "type": "BooleanLiteral",
        "value": "true",
      },
    },
    Node {
      "key": "port",
      "type": "BackendDefinition",
      "value": Node {
        "type": "StringLiteral",
        "value": "\\"443\\"",
      },
    },
    Node {
      "key": "host",
      "type": "BackendDefinition",
      "value": Node {
        "type": "StringLiteral",
        "value": "\\"vaceline.io\\"",
      },
    },
    Node {
      "key": "first_byte_timeout",
      "type": "BackendDefinition",
      "value": Node {
        "type": "DurationLiteral",
        "value": "5s",
      },
    },
    Node {
      "key": "max_connections",
      "type": "BackendDefinition",
      "value": Node {
        "type": "NumericLiteral",
        "value": "100",
      },
    },
    Node {
      "key": "between_bytes_timeout",
      "type": "BackendDefinition",
      "value": Node {
        "type": "DurationLiteral",
        "value": "10s",
      },
    },
    Node {
      "key": "ssl",
      "type": "BackendDefinition",
      "value": Node {
        "type": "BooleanLiteral",
        "value": "true",
      },
    },
    Node {
      "key": "probe",
      "type": "BackendDefinition",
      "value": Array [
        Node {
          "key": "request",
          "type": "BackendDefinition",
          "value": Node {
            "body": Array [
              Node {
                "type": "StringLiteral",
                "value": "\\"GET /healthcheck HTTP/1.1\\"",
              },
              Node {
                "type": "StringLiteral",
                "value": "\\"Host: vaceline.io\\"",
              },
              Node {
                "type": "StringLiteral",
                "value": "\\"Connection: close\\"",
              },
              Node {
                "type": "StringLiteral",
                "value": "\\"User-Agent: Vaceline healthcheck\\"",
              },
            ],
            "type": "ConcatExpression",
          },
        },
        Node {
          "key": "threshold",
          "type": "BackendDefinition",
          "value": Node {
            "type": "NumericLiteral",
            "value": "1",
          },
        },
        Node {
          "key": "window",
          "type": "BackendDefinition",
          "value": Node {
            "type": "NumericLiteral",
            "value": "2",
          },
        },
        Node {
          "key": "timeout",
          "type": "BackendDefinition",
          "value": Node {
            "type": "DurationLiteral",
            "value": "10s",
          },
        },
        Node {
          "key": "initial",
          "type": "BackendDefinition",
          "value": Node {
            "type": "NumericLiteral",
            "value": "1",
          },
        },
        Node {
          "key": "expected_response",
          "type": "BackendDefinition",
          "value": Node {
            "type": "NumericLiteral",
            "value": "200",
          },
        },
        Node {
          "key": "interval",
          "type": "BackendDefinition",
          "value": Node {
            "type": "DurationLiteral",
            "value": "60s",
          },
        },
      ],
    },
  ],
  "id": Node {
    "name": "vaceline_backend",
    "type": "Identifier",
  },
  "type": "BackendStatement",
}
`;

exports[`(BinaryExpression) combination with LogicalExpression 1`] = `
Node {
  "left": Node {
    "left": Node {
      "base": Node {
        "base": Node {
          "name": "req",
          "type": "Identifier",
        },
        "member": Node {
          "name": "http",
          "type": "Identifier",
        },
        "type": "Member",
      },
      "member": Node {
        "name": "Debug",
        "type": "Identifier",
      },
      "type": "Member",
    },
    "operator": "==",
    "right": Node {
      "type": "StringLiteral",
      "value": "\\"1\\"",
    },
    "type": "BinaryExpression",
  },
  "operator": "&&",
  "right": Node {
    "left": Node {
      "type": "StringLiteral",
      "value": "\\"2\\"",
    },
    "operator": "==",
    "right": Node {
      "type": "StringLiteral",
      "value": "\\"3\\"",
    },
    "type": "BinaryExpression",
  },
  "type": "LogicalExpression",
}
`;

exports[`(BinaryExpression) equal 1`] = `
Node {
  "left": Node {
    "base": Node {
      "base": Node {
        "name": "req",
        "type": "Identifier",
      },
      "member": Node {
        "name": "http",
        "type": "Identifier",
      },
      "type": "Member",
    },
    "member": Node {
      "name": "Debug",
      "type": "Identifier",
    },
    "type": "Member",
  },
  "operator": "==",
  "right": Node {
    "type": "StringLiteral",
    "value": "\\"1\\"",
  },
  "type": "BinaryExpression",
}
`;

exports[`(BinaryExpression) match 1`] = `
Node {
  "left": Node {
    "base": Node {
      "base": Node {
        "name": "req",
        "type": "Identifier",
      },
      "member": Node {
        "name": "http",
        "type": "Identifier",
      },
      "type": "Member",
    },
    "member": Node {
      "name": "Debug",
      "type": "Identifier",
    },
    "type": "Member",
  },
  "operator": "~",
  "right": Node {
    "type": "StringLiteral",
    "value": "\\"1\\"",
  },
  "type": "BinaryExpression",
}
`;

exports[`(BinaryExpression) multiple 1`] = `
Node {
  "left": Node {
    "left": Node {
      "left": Node {
        "base": Node {
          "base": Node {
            "name": "req",
            "type": "Identifier",
          },
          "member": Node {
            "name": "http",
            "type": "Identifier",
          },
          "type": "Member",
        },
        "member": Node {
          "name": "Debug",
          "type": "Identifier",
        },
        "type": "Member",
      },
      "operator": "==",
      "right": Node {
        "type": "StringLiteral",
        "value": "\\"1\\"",
      },
      "type": "BinaryExpression",
    },
    "operator": "==",
    "right": Node {
      "type": "StringLiteral",
      "value": "\\"2\\"",
    },
    "type": "BinaryExpression",
  },
  "operator": "==",
  "right": Node {
    "type": "StringLiteral",
    "value": "\\"3\\"",
  },
  "type": "BinaryExpression",
}
`;

exports[`(BinaryExpression) not equal 1`] = `
Node {
  "left": Node {
    "base": Node {
      "base": Node {
        "name": "req",
        "type": "Identifier",
      },
      "member": Node {
        "name": "http",
        "type": "Identifier",
      },
      "type": "Member",
    },
    "member": Node {
      "name": "Debug",
      "type": "Identifier",
    },
    "type": "Member",
  },
  "operator": "!=",
  "right": Node {
    "type": "StringLiteral",
    "value": "\\"1\\"",
  },
  "type": "BinaryExpression",
}
`;

exports[`(BooleanExpression) with binary 1`] = `
Node {
  "body": Node {
    "left": Node {
      "base": Node {
        "base": Node {
          "name": "req",
          "type": "Identifier",
        },
        "member": Node {
          "name": "http",
          "type": "Identifier",
        },
        "type": "Member",
      },
      "member": Node {
        "name": "Debug",
        "type": "Identifier",
      },
      "type": "Member",
    },
    "operator": "==",
    "right": Node {
      "type": "StringLiteral",
      "value": "\\"1\\"",
    },
    "type": "BinaryExpression",
  },
  "type": "BooleanExpression",
}
`;

exports[`(BooleanExpression) with logical 1`] = `
Node {
  "body": Node {
    "left": Node {
      "base": Node {
        "name": "var",
        "type": "Identifier",
      },
      "member": Node {
        "name": "Debug",
        "type": "Identifier",
      },
      "type": "Member",
    },
    "operator": "&&",
    "right": Node {
      "type": "StringLiteral",
      "value": "\\"1\\"",
    },
    "type": "LogicalExpression",
  },
  "type": "BooleanExpression",
}
`;

exports[`(BooleanLiteral) false 1`] = `
Node {
  "type": "BooleanLiteral",
  "value": "false",
}
`;

exports[`(BooleanLiteral) true 1`] = `
Node {
  "type": "BooleanLiteral",
  "value": "true",
}
`;

exports[`(CallStatement) basic 1`] = `
Node {
  "subroutine": Node {
    "name": "vaceline_func",
    "type": "Identifier",
  },
  "type": "CallStatement",
}
`;

exports[`(ConcatExpression) expressions 1`] = `
Node {
  "body": Array [
    Node {
      "type": "StringLiteral",
      "value": "\\"a\\"",
    },
    Node {
      "type": "NumericLiteral",
      "value": "1",
    },
    Node {
      "base": Node {
        "base": Node {
          "name": "req",
          "type": "Identifier",
        },
        "member": Node {
          "name": "http",
          "type": "Identifier",
        },
        "type": "Member",
      },
      "member": Node {
        "name": "A",
        "type": "Identifier",
      },
      "type": "Member",
    },
  ],
  "type": "ConcatExpression",
}
`;

exports[`(ConcatExpression) strings 1`] = `
Node {
  "body": Array [
    Node {
      "type": "StringLiteral",
      "value": "\\"a\\"",
    },
    Node {
      "type": "StringLiteral",
      "value": "\\"b\\"",
    },
    Node {
      "type": "StringLiteral",
      "value": "\\"c\\"",
    },
  ],
  "type": "ConcatExpression",
}
`;

exports[`(DeclareStatement) bool 1`] = `
Node {
  "id": Node {
    "base": Node {
      "name": "var",
      "type": "Identifier",
    },
    "member": Node {
      "name": "Vaceline",
      "type": "Identifier",
    },
    "type": "Member",
  },
  "type": "DeclareStatement",
  "valueType": "BOOL",
}
`;

exports[`(DeclareStatement) float 1`] = `
Node {
  "id": Node {
    "base": Node {
      "name": "var",
      "type": "Identifier",
    },
    "member": Node {
      "name": "Vaceline",
      "type": "Identifier",
    },
    "type": "Member",
  },
  "type": "DeclareStatement",
  "valueType": "FLOAT",
}
`;

exports[`(DeclareStatement) integer 1`] = `
Node {
  "id": Node {
    "base": Node {
      "name": "var",
      "type": "Identifier",
    },
    "member": Node {
      "name": "Vaceline",
      "type": "Identifier",
    },
    "type": "Member",
  },
  "type": "DeclareStatement",
  "valueType": "INTEGER",
}
`;

exports[`(DeclareStatement) string 1`] = `
Node {
  "id": Node {
    "base": Node {
      "name": "var",
      "type": "Identifier",
    },
    "member": Node {
      "name": "Vaceline",
      "type": "Identifier",
    },
    "type": "Member",
  },
  "type": "DeclareStatement",
  "valueType": "STRING",
}
`;

exports[`(DurationLiteral) day 1`] = `
Node {
  "type": "DurationLiteral",
  "value": "1d",
}
`;

exports[`(DurationLiteral) min 1`] = `
Node {
  "type": "DurationLiteral",
  "value": "1m",
}
`;

exports[`(DurationLiteral) ms 1`] = `
Node {
  "type": "DurationLiteral",
  "value": "1ms",
}
`;

exports[`(DurationLiteral) s 1`] = `
Node {
  "type": "DurationLiteral",
  "value": "1s",
}
`;

exports[`(DurationLiteral) with space between 1`] = `
Node {
  "type": "DurationLiteral",
  "value": "1m",
}
`;

exports[`(DurationLiteral) year 1`] = `
Node {
  "type": "DurationLiteral",
  "value": "1y",
}
`;

exports[`(ErrorStatement) basic 1`] = `
Node {
  "message": undefined,
  "status": 404,
  "type": "ErrorStatement",
}
`;

exports[`(ErrorStatement) with response 1`] = `
Node {
  "message": Node {
    "type": "StringLiteral",
    "value": "\\"Not Found\\"",
  },
  "status": 404,
  "type": "ErrorStatement",
}
`;

exports[`(ErrorStatement) with variable response 1`] = `
Node {
  "message": Node {
    "base": Node {
      "base": Node {
        "name": "req",
        "type": "Identifier",
      },
      "member": Node {
        "name": "http",
        "type": "Identifier",
      },
      "type": "Member",
    },
    "member": Node {
      "name": "Debug",
      "type": "Identifier",
    },
    "type": "Member",
  },
  "status": 800,
  "type": "ErrorStatement",
}
`;

exports[`(ExpressionStatement) with FunCallExpression 1`] = `
Node {
  "body": Node {
    "args": Array [
      Node {
        "name": "a",
        "type": "Identifier",
      },
    ],
    "callee": Node {
      "name": "func",
      "type": "Identifier",
    },
    "type": "FunCallExpression",
  },
  "type": "ExpressionStatement",
}
`;

exports[`(ExpressionStatement) with Identifer 1`] = `
Node {
  "body": Node {
    "name": "vaceline",
    "type": "Identifier",
  },
  "type": "ExpressionStatement",
}
`;

exports[`(ExpressionStatement) with Literal 1`] = `
Node {
  "body": Node {
    "type": "StringLiteral",
    "value": "\\"string\\"",
  },
  "type": "ExpressionStatement",
}
`;

exports[`(ExpressionStatement) with Member & Identifier 1`] = `
Node {
  "body": Node {
    "base": Node {
      "base": Node {
        "name": "req",
        "type": "Identifier",
      },
      "member": Node {
        "name": "http",
        "type": "Identifier",
      },
      "type": "Member",
    },
    "member": Node {
      "name": "Vaceline",
      "type": "Identifier",
    },
    "type": "Member",
  },
  "type": "ExpressionStatement",
}
`;

exports[`(FunCallExpression) \`if\` func 1`] = `
Node {
  "args": Array [
    Node {
      "type": "StringLiteral",
      "value": "\\"a\\"",
    },
    Node {
      "type": "StringLiteral",
      "value": "\\"b\\"",
    },
    Node {
      "type": "StringLiteral",
      "value": "\\"c\\"",
    },
  ],
  "callee": Node {
    "name": "if",
    "type": "Identifier",
  },
  "type": "FunCallExpression",
}
`;

exports[`(FunCallExpression) normal 1`] = `
Node {
  "args": Array [
    Node {
      "type": "StringLiteral",
      "value": "\\"a\\"",
    },
  ],
  "callee": Node {
    "name": "func",
    "type": "Identifier",
  },
  "type": "FunCallExpression",
}
`;

exports[`(FunCallExpression) with multiple args 1`] = `
Node {
  "args": Array [
    Node {
      "type": "StringLiteral",
      "value": "\\"a\\"",
    },
    Node {
      "type": "StringLiteral",
      "value": "\\"b\\"",
    },
  ],
  "callee": Node {
    "name": "func",
    "type": "Identifier",
  },
  "type": "FunCallExpression",
}
`;

exports[`(FunCallExpression) with whitespace 1`] = `
Node {
  "args": Array [
    Node {
      "type": "StringLiteral",
      "value": "\\"a\\"",
    },
  ],
  "callee": Node {
    "name": "func",
    "type": "Identifier",
  },
  "type": "FunCallExpression",
}
`;

exports[`(Identifier) normal 1`] = `
Node {
  "name": "vaceline",
  "type": "Identifier",
}
`;

exports[`(IfStatement) basic 1`] = `
Node {
  "alternative": undefined,
  "consequent": Array [
    Node {
      "left": Node {
        "base": Node {
          "name": "var",
          "type": "Identifier",
        },
        "member": Node {
          "name": "value",
          "type": "Identifier",
        },
        "type": "Member",
      },
      "operator": "=",
      "right": Node {
        "type": "NumericLiteral",
        "value": "1",
      },
      "type": "SetStatement",
    },
  ],
  "test": Node {
    "base": Node {
      "name": "var",
      "type": "Identifier",
    },
    "member": Node {
      "name": "condition",
      "type": "Identifier",
    },
    "type": "Member",
  },
  "type": "IfStatement",
}
`;

exports[`(IfStatement) with else 1`] = `
Node {
  "alternative": Array [
    Node {
      "left": Node {
        "base": Node {
          "name": "var",
          "type": "Identifier",
        },
        "member": Node {
          "name": "value",
          "type": "Identifier",
        },
        "type": "Member",
      },
      "operator": "=",
      "right": Node {
        "type": "NumericLiteral",
        "value": "2",
      },
      "type": "SetStatement",
    },
  ],
  "consequent": Array [
    Node {
      "left": Node {
        "base": Node {
          "name": "var",
          "type": "Identifier",
        },
        "member": Node {
          "name": "value",
          "type": "Identifier",
        },
        "type": "Member",
      },
      "operator": "=",
      "right": Node {
        "type": "NumericLiteral",
        "value": "1",
      },
      "type": "SetStatement",
    },
  ],
  "test": Node {
    "base": Node {
      "name": "var",
      "type": "Identifier",
    },
    "member": Node {
      "name": "condition",
      "type": "Identifier",
    },
    "type": "Member",
  },
  "type": "IfStatement",
}
`;

exports[`(IfStatement) with else if 1`] = `
Node {
  "alternative": Node {
    "alternative": Array [
      Node {
        "left": Node {
          "base": Node {
            "name": "var",
            "type": "Identifier",
          },
          "member": Node {
            "name": "value",
            "type": "Identifier",
          },
          "type": "Member",
        },
        "operator": "=",
        "right": Node {
          "type": "NumericLiteral",
          "value": "0",
        },
        "type": "SetStatement",
      },
    ],
    "consequent": Array [
      Node {
        "left": Node {
          "base": Node {
            "name": "var",
            "type": "Identifier",
          },
          "member": Node {
            "name": "value",
            "type": "Identifier",
          },
          "type": "Member",
        },
        "operator": "=",
        "right": Node {
          "type": "NumericLiteral",
          "value": "2",
        },
        "type": "SetStatement",
      },
    ],
    "test": Node {
      "argument": Node {
        "base": Node {
          "name": "var",
          "type": "Identifier",
        },
        "member": Node {
          "name": "condition",
          "type": "Identifier",
        },
        "type": "Member",
      },
      "operator": "!",
      "type": "UnaryExpression",
    },
    "type": "IfStatement",
  },
  "consequent": Array [
    Node {
      "left": Node {
        "base": Node {
          "name": "var",
          "type": "Identifier",
        },
        "member": Node {
          "name": "value",
          "type": "Identifier",
        },
        "type": "Member",
      },
      "operator": "=",
      "right": Node {
        "type": "NumericLiteral",
        "value": "1",
      },
      "type": "SetStatement",
    },
  ],
  "test": Node {
    "base": Node {
      "name": "var",
      "type": "Identifier",
    },
    "member": Node {
      "name": "condition",
      "type": "Identifier",
    },
    "type": "Member",
  },
  "type": "IfStatement",
}
`;

exports[`(IfStatement) with empty lines 1`] = `
Node {
  "alternative": Node {
    "alternative": Array [
      Node {
        "left": Node {
          "base": Node {
            "name": "var",
            "type": "Identifier",
          },
          "member": Node {
            "name": "value",
            "type": "Identifier",
          },
          "type": "Member",
        },
        "operator": "=",
        "right": Node {
          "type": "NumericLiteral",
          "value": "0",
        },
        "type": "SetStatement",
      },
    ],
    "consequent": Array [
      Node {
        "left": Node {
          "base": Node {
            "name": "var",
            "type": "Identifier",
          },
          "member": Node {
            "name": "value",
            "type": "Identifier",
          },
          "type": "Member",
        },
        "operator": "=",
        "right": Node {
          "type": "NumericLiteral",
          "value": "2",
        },
        "type": "SetStatement",
      },
    ],
    "test": Node {
      "argument": Node {
        "base": Node {
          "name": "var",
          "type": "Identifier",
        },
        "member": Node {
          "name": "condition",
          "type": "Identifier",
        },
        "type": "Member",
      },
      "operator": "!",
      "type": "UnaryExpression",
    },
    "type": "IfStatement",
  },
  "consequent": Array [
    Node {
      "left": Node {
        "base": Node {
          "name": "var",
          "type": "Identifier",
        },
        "member": Node {
          "name": "value",
          "type": "Identifier",
        },
        "type": "Member",
      },
      "operator": "=",
      "right": Node {
        "type": "NumericLiteral",
        "value": "1",
      },
      "type": "SetStatement",
    },
  ],
  "test": Node {
    "base": Node {
      "name": "var",
      "type": "Identifier",
    },
    "member": Node {
      "name": "condition",
      "type": "Identifier",
    },
    "type": "Member",
  },
  "type": "IfStatement",
}
`;

exports[`(ImportStatement) basic 1`] = `
Node {
  "module": Node {
    "name": "module",
    "type": "Identifier",
  },
  "type": "ImportStatement",
}
`;

exports[`(IncludeStatement) basic 1`] = `
Node {
  "module": Node {
    "type": "StringLiteral",
    "value": "\\"external_library\\"",
  },
  "type": "IncludeStatement",
}
`;

exports[`(Ip) 6to4 mapping 1`] = `
Node {
  "type": "StringLiteral",
  "value": "\\"2002:c000:0204::\\"",
}
`;

exports[`(Ip) 6to4 mapping 2`] = `
Node {
  "type": "StringLiteral",
  "value": "\\"::FFFF:192.0.2.4\\"",
}
`;

exports[`(Ip) 6to4 mapping 3`] = `
Node {
  "type": "StringLiteral",
  "value": "\\"::1\\"",
}
`;

exports[`(Ip) IPv4 1`] = `
Node {
  "type": "StringLiteral",
  "value": "\\"192.0.2.0\\"",
}
`;

exports[`(Ip) IPv4 with cidr 1`] = `
Node {
  "cidr": 16,
  "type": "Ip",
  "value": "192.0.2.0",
}
`;

exports[`(Ip) IPv6 1`] = `
Node {
  "type": "StringLiteral",
  "value": "\\"2001:db8::1\\"",
}
`;

exports[`(Ip) IPv6 with cidr 1`] = `
Node {
  "cidr": 16,
  "type": "Ip",
  "value": "2001:db8::1",
}
`;

exports[`(Ip) localhost 1`] = `
Node {
  "type": "StringLiteral",
  "value": "\\"localhost\\"",
}
`;

exports[`(Ip) unspecified address 1`] = `
Node {
  "type": "StringLiteral",
  "value": "\\"::\\"",
}
`;

exports[`(LogStatement) basic 1`] = `
Node {
  "content": Node {
    "body": Array [
      Node {
        "type": "StringLiteral",
        "value": "\\"log\\"",
      },
      Node {
        "base": Node {
          "name": "req",
          "type": "Identifier",
        },
        "member": Node {
          "name": "service_id",
          "type": "Identifier",
        },
        "type": "Member",
      },
      Node {
        "type": "StringLiteral",
        "value": "\\"vaceline-log :: \\"",
      },
      Node {
        "type": "StringLiteral",
        "value": "{\\"	timestamp_us:\\"}",
      },
      Node {
        "base": Node {
          "base": Node {
            "name": "time",
            "type": "Identifier",
          },
          "member": Node {
            "name": "start",
            "type": "Identifier",
          },
          "type": "Member",
        },
        "member": Node {
          "name": "usec",
          "type": "Identifier",
        },
        "type": "Member",
      },
      Node {
        "type": "StringLiteral",
        "value": "{\\"	host:\\"}",
      },
      Node {
        "args": Array [
          Node {
            "base": Node {
              "base": Node {
                "name": "req",
                "type": "Identifier",
              },
              "member": Node {
                "name": "http",
                "type": "Identifier",
              },
              "type": "Member",
            },
            "member": Node {
              "name": "X-Forwarded-Host",
              "type": "Identifier",
            },
            "type": "Member",
          },
          Node {
            "type": "StringLiteral",
            "value": "{\\"	\\"}",
          },
          Node {
            "type": "StringLiteral",
            "value": "\\"\\"",
          },
        ],
        "callee": Node {
          "name": "regsuball",
          "type": "Identifier",
        },
        "type": "FunCallExpression",
      },
    ],
    "type": "ConcatExpression",
  },
  "type": "LogStatement",
}
`;

exports[`(LogicalExpression) and 1`] = `
Node {
  "left": Node {
    "base": Node {
      "base": Node {
        "name": "req",
        "type": "Identifier",
      },
      "member": Node {
        "name": "http",
        "type": "Identifier",
      },
      "type": "Member",
    },
    "member": Node {
      "name": "Debug",
      "type": "Identifier",
    },
    "type": "Member",
  },
  "operator": "&&",
  "right": Node {
    "type": "StringLiteral",
    "value": "\\"1\\"",
  },
  "type": "LogicalExpression",
}
`;

exports[`(LogicalExpression) combination 1`] = `
Node {
  "left": Node {
    "left": Node {
      "name": "debug",
      "type": "Identifier",
    },
    "operator": "&&",
    "right": Node {
      "type": "StringLiteral",
      "value": "\\"1\\"",
    },
    "type": "LogicalExpression",
  },
  "operator": "||",
  "right": Node {
    "type": "StringLiteral",
    "value": "\\"2\\"",
  },
  "type": "LogicalExpression",
}
`;

exports[`(LogicalExpression) combination with BinaryExpression 1`] = `
Node {
  "left": Node {
    "left": Node {
      "name": "debug",
      "type": "Identifier",
    },
    "operator": "==",
    "right": Node {
      "type": "StringLiteral",
      "value": "\\"1\\"",
    },
    "type": "BinaryExpression",
  },
  "operator": "&&",
  "right": Node {
    "type": "StringLiteral",
    "value": "\\"2\\"",
  },
  "type": "LogicalExpression",
}
`;

exports[`(LogicalExpression) combination2 1`] = `
Node {
  "left": Node {
    "name": "debug",
    "type": "Identifier",
  },
  "operator": "||",
  "right": Node {
    "left": Node {
      "type": "StringLiteral",
      "value": "\\"1\\"",
    },
    "operator": "&&",
    "right": Node {
      "type": "StringLiteral",
      "value": "\\"2\\"",
    },
    "type": "LogicalExpression",
  },
  "type": "LogicalExpression",
}
`;

exports[`(LogicalExpression) combination2 with BinaryExpression 1`] = `
Node {
  "left": Node {
    "left": Node {
      "name": "debug",
      "type": "Identifier",
    },
    "operator": "==",
    "right": Node {
      "type": "StringLiteral",
      "value": "\\"1\\"",
    },
    "type": "BinaryExpression",
  },
  "operator": "||",
  "right": Node {
    "type": "StringLiteral",
    "value": "\\"2\\"",
  },
  "type": "LogicalExpression",
}
`;

exports[`(LogicalExpression) combination3 1`] = `
Node {
  "left": Node {
    "name": "debug",
    "type": "Identifier",
  },
  "operator": "&&",
  "right": Node {
    "left": Node {
      "type": "StringLiteral",
      "value": "\\"1\\"",
    },
    "operator": "==",
    "right": Node {
      "type": "StringLiteral",
      "value": "\\"2\\"",
    },
    "type": "BinaryExpression",
  },
  "type": "LogicalExpression",
}
`;

exports[`(LogicalExpression) combination4 1`] = `
Node {
  "left": Node {
    "name": "debug",
    "type": "Identifier",
  },
  "operator": "||",
  "right": Node {
    "left": Node {
      "type": "StringLiteral",
      "value": "\\"1\\"",
    },
    "operator": "==",
    "right": Node {
      "type": "StringLiteral",
      "value": "\\"2\\"",
    },
    "type": "BinaryExpression",
  },
  "type": "LogicalExpression",
}
`;

exports[`(LogicalExpression) or 1`] = `
Node {
  "left": Node {
    "base": Node {
      "base": Node {
        "name": "req",
        "type": "Identifier",
      },
      "member": Node {
        "name": "http",
        "type": "Identifier",
      },
      "type": "Member",
    },
    "member": Node {
      "name": "Debug",
      "type": "Identifier",
    },
    "type": "Member",
  },
  "operator": "||",
  "right": Node {
    "type": "StringLiteral",
    "value": "\\"1\\"",
  },
  "type": "LogicalExpression",
}
`;

exports[`(Member) basic 1`] = `
Node {
  "base": Node {
    "name": "req",
    "type": "Identifier",
  },
  "member": Node {
    "name": "backend",
    "type": "Identifier",
  },
  "type": "Member",
}
`;

exports[`(Member) deep 1`] = `
Node {
  "base": Node {
    "base": Node {
      "name": "req",
      "type": "Identifier",
    },
    "member": Node {
      "name": "http",
      "type": "Identifier",
    },
    "type": "Member",
  },
  "member": Node {
    "name": "Debug",
    "type": "Identifier",
  },
  "type": "Member",
}
`;

exports[`(Member) deep in BinaryExpression 1`] = `
Node {
  "left": Node {
    "base": Node {
      "base": Node {
        "name": "req",
        "type": "Identifier",
      },
      "member": Node {
        "name": "http",
        "type": "Identifier",
      },
      "type": "Member",
    },
    "member": Node {
      "name": "Debug",
      "type": "Identifier",
    },
    "type": "Member",
  },
  "operator": "==",
  "right": Node {
    "type": "StringLiteral",
    "value": "\\"debug\\"",
  },
  "type": "BinaryExpression",
}
`;

exports[`(Member) in BinaryExpression 1`] = `
Node {
  "left": Node {
    "base": Node {
      "name": "req",
      "type": "Identifier",
    },
    "member": Node {
      "name": "backend",
      "type": "Identifier",
    },
    "type": "Member",
  },
  "operator": "==",
  "right": Node {
    "name": "backend",
    "type": "Identifier",
  },
  "type": "BinaryExpression",
}
`;

exports[`(MultilineLiteral) basic 1`] = `
Node {
  "type": "StringLiteral",
  "value": "{\\"
  vaceline
\\"}",
}
`;

exports[`(NumericLiteral) integer 1`] = `
Node {
  "type": "NumericLiteral",
  "value": "10",
}
`;

exports[`(NumericLiteral) zero 1`] = `
Node {
  "type": "NumericLiteral",
  "value": "0",
}
`;

exports[`(Program) single handling 1`] = `
Node {
  "body": Array [
    Node {
      "body": Array [
        Node {
          "id": Node {
            "base": Node {
              "name": "var",
              "type": "Identifier",
            },
            "member": Node {
              "name": "vacelinDebug",
              "type": "Identifier",
            },
            "type": "Member",
          },
          "type": "DeclareStatement",
          "valueType": "STRING",
        },
        Node {
          "left": Node {
            "base": Node {
              "name": "var",
              "type": "Identifier",
            },
            "member": Node {
              "name": "vacelineDebug",
              "type": "Identifier",
            },
            "type": "Member",
          },
          "operator": "=",
          "right": Node {
            "type": "StringLiteral",
            "value": "\\"initial\\"",
          },
          "type": "SetStatement",
        },
        Node {
          "alternative": undefined,
          "consequent": Array [
            Node {
              "left": Node {
                "base": Node {
                  "name": "var",
                  "type": "Identifier",
                },
                "member": Node {
                  "name": "vacelinDebug",
                  "type": "Identifier",
                },
                "type": "Member",
              },
              "operator": "=",
              "right": Node {
                "type": "StringLiteral",
                "value": "\\"Vacelin Debug Log\\"",
              },
              "type": "AddStatement",
            },
          ],
          "test": Node {
            "left": Node {
              "base": Node {
                "base": Node {
                  "base": Node {
                    "name": "req",
                    "type": "Identifier",
                  },
                  "member": Node {
                    "name": "http",
                    "type": "Identifier",
                  },
                  "type": "Member",
                },
                "member": Node {
                  "name": "Vacelin",
                  "type": "Identifier",
                },
                "type": "Member",
              },
              "name": Node {
                "name": "Some",
                "type": "Identifier",
              },
              "type": "ValuePair",
            },
            "operator": "==",
            "right": Node {
              "type": "StringLiteral",
              "value": "\\"Some\\"",
            },
            "type": "BinaryExpression",
          },
          "type": "IfStatement",
        },
      ],
      "id": Node {
        "name": "vcl_recv",
        "type": "Identifier",
      },
      "type": "SubroutineStatement",
    },
  ],
  "type": "Program",
}
`;

exports[`(Program) with empty lines 1`] = `
Node {
  "body": Array [
    Node {
      "id": Node {
        "base": Node {
          "name": "var",
          "type": "Identifier",
        },
        "member": Node {
          "name": "vacelinDebug",
          "type": "Identifier",
        },
        "type": "Member",
      },
      "type": "DeclareStatement",
      "valueType": "STRING",
    },
    Node {
      "left": Node {
        "base": Node {
          "name": "var",
          "type": "Identifier",
        },
        "member": Node {
          "name": "vacelineDebug",
          "type": "Identifier",
        },
        "type": "Member",
      },
      "operator": "=",
      "right": Node {
        "type": "StringLiteral",
        "value": "\\"1\\"",
      },
      "type": "SetStatement",
    },
    Node {
      "left": Node {
        "base": Node {
          "name": "var",
          "type": "Identifier",
        },
        "member": Node {
          "name": "vacelineDebug",
          "type": "Identifier",
        },
        "type": "Member",
      },
      "operator": "=",
      "right": Node {
        "type": "StringLiteral",
        "value": "\\"2\\"",
      },
      "type": "SetStatement",
    },
    Node {
      "left": Node {
        "base": Node {
          "name": "var",
          "type": "Identifier",
        },
        "member": Node {
          "name": "vacelineDebug",
          "type": "Identifier",
        },
        "type": "Member",
      },
      "operator": "=",
      "right": Node {
        "type": "StringLiteral",
        "value": "\\"3\\"",
      },
      "type": "SetStatement",
    },
    Node {
      "left": Node {
        "base": Node {
          "name": "var",
          "type": "Identifier",
        },
        "member": Node {
          "name": "vacelineDebug",
          "type": "Identifier",
        },
        "type": "Member",
      },
      "operator": "=",
      "right": Node {
        "type": "StringLiteral",
        "value": "\\"4\\"",
      },
      "type": "SetStatement",
    },
    Node {
      "left": Node {
        "base": Node {
          "name": "var",
          "type": "Identifier",
        },
        "member": Node {
          "name": "vacelineDebug",
          "type": "Identifier",
        },
        "type": "Member",
      },
      "operator": "=",
      "right": Node {
        "type": "StringLiteral",
        "value": "\\"5\\"",
      },
      "type": "SetStatement",
    },
  ],
  "type": "Program",
}
`;

exports[`(RestartStatement) basic 1`] = `
Node {
  "type": "RestartStatement",
}
`;

exports[`(ReturnStatement) with parens 1`] = `
Node {
  "action": "pass",
  "type": "ReturnStatement",
}
`;

exports[`(SetStatement) addition 1`] = `
Node {
  "left": Node {
    "base": Node {
      "name": "var",
      "type": "Identifier",
    },
    "member": Node {
      "name": "vacel",
      "type": "Identifier",
    },
    "type": "Member",
  },
  "operator": "+=",
  "right": Node {
    "type": "StringLiteral",
    "value": "\\"vacel\\"",
  },
  "type": "SetStatement",
}
`;

exports[`(SetStatement) assignment 1`] = `
Node {
  "left": Node {
    "base": Node {
      "name": "var",
      "type": "Identifier",
    },
    "member": Node {
      "name": "vacel",
      "type": "Identifier",
    },
    "type": "Member",
  },
  "operator": "=",
  "right": Node {
    "type": "StringLiteral",
    "value": "\\"vacel\\"",
  },
  "type": "SetStatement",
}
`;

exports[`(SetStatement) division 1`] = `
Node {
  "left": Node {
    "base": Node {
      "name": "var",
      "type": "Identifier",
    },
    "member": Node {
      "name": "vacel",
      "type": "Identifier",
    },
    "type": "Member",
  },
  "operator": "*=",
  "right": Node {
    "type": "StringLiteral",
    "value": "\\"vacel\\"",
  },
  "type": "SetStatement",
}
`;

exports[`(SetStatement) multiplication 1`] = `
Node {
  "left": Node {
    "base": Node {
      "name": "var",
      "type": "Identifier",
    },
    "member": Node {
      "name": "vacel",
      "type": "Identifier",
    },
    "type": "Member",
  },
  "operator": "*=",
  "right": Node {
    "type": "StringLiteral",
    "value": "\\"vacel\\"",
  },
  "type": "SetStatement",
}
`;

exports[`(SetStatement) substraction 1`] = `
Node {
  "left": Node {
    "base": Node {
      "name": "var",
      "type": "Identifier",
    },
    "member": Node {
      "name": "vacel",
      "type": "Identifier",
    },
    "type": "Member",
  },
  "operator": "-=",
  "right": Node {
    "type": "StringLiteral",
    "value": "\\"vacel\\"",
  },
  "type": "SetStatement",
}
`;

exports[`(StringLiteral) basic 1`] = `
Node {
  "type": "StringLiteral",
  "value": "\\"string\\"",
}
`;

exports[`(StringLiteral) not a comment 1`] = `
Node {
  "type": "StringLiteral",
  "value": "\\"# not a comment\\"",
}
`;

exports[`(StringLiteral) not an inline comment 1`] = `
Node {
  "type": "StringLiteral",
  "value": "\\"/* not an inline comment */\\"",
}
`;

exports[`(SubroutineStatement) basic 1`] = `
Node {
  "body": Array [
    Node {
      "left": Node {
        "name": "vaceline",
        "type": "Identifier",
      },
      "operator": "=",
      "right": Node {
        "type": "StringLiteral",
        "value": "\\"aaa\\"",
      },
      "type": "SetStatement",
    },
    Node {
      "left": Node {
        "name": "vaceline",
        "type": "Identifier",
      },
      "operator": "=",
      "right": Node {
        "type": "StringLiteral",
        "value": "\\"bbb\\"",
      },
      "type": "SetStatement",
    },
  ],
  "id": Node {
    "name": "vcl_recv",
    "type": "Identifier",
  },
  "type": "SubroutineStatement",
}
`;

exports[`(SubroutineStatement) with empty lines 1`] = `
Node {
  "body": Array [
    Node {
      "left": Node {
        "name": "vaceline",
        "type": "Identifier",
      },
      "operator": "=",
      "right": Node {
        "type": "StringLiteral",
        "value": "\\"aaa\\"",
      },
      "type": "SetStatement",
    },
    Node {
      "left": Node {
        "name": "vaceline",
        "type": "Identifier",
      },
      "operator": "=",
      "right": Node {
        "type": "StringLiteral",
        "value": "\\"bbb\\"",
      },
      "type": "SetStatement",
    },
  ],
  "id": Node {
    "name": "vcl_recv",
    "type": "Identifier",
  },
  "type": "SubroutineStatement",
}
`;

exports[`(SyntheticStatement) basic 1`] = `
Node {
  "response": Node {
    "type": "StringLiteral",
    "value": "\\"\\"",
  },
  "type": "SyntheticStatement",
}
`;

exports[`(TableStatement) single key-value 1`] = `
Node {
  "body": Array [
    Node {
      "key": "\\"key\\"",
      "type": "TableDefinition",
      "value": "\\"value\\"",
    },
  ],
  "id": Node {
    "name": "vaceline_table",
    "type": "Identifier",
  },
  "type": "TableStatement",
}
`;

exports[`(TableStatement) single key-values 1`] = `
Node {
  "body": Array [
    Node {
      "key": "\\"key\\"",
      "type": "TableDefinition",
      "value": "\\"value\\"",
    },
    Node {
      "key": "\\"key2\\"",
      "type": "TableDefinition",
      "value": "\\"value2\\"",
    },
  ],
  "id": Node {
    "name": "vaceline_table",
    "type": "Identifier",
  },
  "type": "TableStatement",
}
`;

exports[`(UnaryExpression) boolean literal 1`] = `
Node {
  "argument": Node {
    "type": "BooleanLiteral",
    "value": "true",
  },
  "operator": "!",
  "type": "UnaryExpression",
}
`;

exports[`(UnaryExpression) variable 1`] = `
Node {
  "argument": Node {
    "name": "condition",
    "type": "Identifier",
  },
  "operator": "!",
  "type": "UnaryExpression",
}
`;

exports[`(UnsetStatement) member 1`] = `
Node {
  "id": Node {
    "base": Node {
      "name": "var",
      "type": "Identifier",
    },
    "member": Node {
      "name": "value",
      "type": "Identifier",
    },
    "type": "Member",
  },
  "type": "UnsetStatement",
}
`;

exports[`(UnsetStatement) variable 1`] = `
Node {
  "id": Node {
    "name": "value",
    "type": "Identifier",
  },
  "type": "UnsetStatement",
}
`;

exports[`(ValuePair) basic 1`] = `
Node {
  "base": Node {
    "name": "Cookie",
    "type": "Identifier",
  },
  "name": Node {
    "name": "Vacelin",
    "type": "Identifier",
  },
  "type": "ValuePair",
}
`;
