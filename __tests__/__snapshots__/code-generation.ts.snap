// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`(AclStatement) basic 1`] = `
aclaaa127.0.0.1
localhost;
`;

exports[`(AddStatement) TODO: cover operand types
addition 1`] = `add var.vacel += "vacel";`;

exports[`(AddStatement) assignment 1`] = `add var.vacel = "vacel";`;

exports[`(AddStatement) division 1`] = `add var.vacel *= "vacel";`;

exports[`(AddStatement) multiplication 1`] = `add var.vacel *= "vacel";`;

exports[`(AddStatement) substraction 1`] = `add var.vacel -= "vacel";`;

exports[`(BackendStatement) basic 1`] = `
backend vaceline_backend {
  .connect_timeout = 1s;
  .dynamic = true;
  .port = "443";
  .host = "vaceline.io";
  .first_byte_timeout = 5s;
  .max_connections = 100;
  .between_bytes_timeout = 10s;
  .share_key = "f8585BOxnGQDMbnkJoM1e";
  .ssl = true;
  .probe = {
    .request = "GET /healthcheck HTTP/1.1"
    "Host: vaceline.io"
    "Connection: close"
    "User-Agent: Vaceline healthcheck";
    .threshold = 1;
    .window = 2;
    .timeout = 10s;
    .initial = 1;
    .expected_response = 200;
    .interval = 60s;
  }
}
`;

exports[`(BinaryExpression) combinations 1`] = `req.http.Debug == "1" == "2" == "3"`;

exports[`(BinaryExpression) equal 1`] = `req.http.Debug == "1"`;

exports[`(BinaryExpression) match 1`] = `req.http.Debug ~ "1"`;

exports[`(BinaryExpression) not equal 1`] = `req.http.Debug != "1"`;

exports[`(BooleanExpression) assign 1`] = `
set
var.Debug
`;

exports[`(BooleanExpression) with binary 1`] = `
(
  req.http.Debug == "1"
)
`;

exports[`(BooleanExpression) with logical 1`] = `
(
  var.Debug &&
  "1"
)
`;

exports[`(BooleanLiteral) false 1`] = `false`;

exports[`(BooleanLiteral) true 1`] = `true`;

exports[`(CallStatement) basic 1`] = `call vaceline_func;`;

exports[`(ConcatExpression) expressions 1`] = `
"a"
1
req.http.A
`;

exports[`(ConcatExpression) strings 1`] = `
"a"
"b"
`;

exports[`(DeclareStatement) bool 1`] = `declare local var.Vaceline BOOL;`;

exports[`(DeclareStatement) float 1`] = `declare local var.Vaceline FLOAT;`;

exports[`(DeclareStatement) integer 1`] = `declare local var.Vaceline INTEGER;`;

exports[`(DeclareStatement) string 1`] = `declare local var.Vaceline STRING;`;

exports[`(DurationLiteral) day 1`] = `1d`;

exports[`(DurationLiteral) min 1`] = `1m`;

exports[`(DurationLiteral) month 1`] = `1`;

exports[`(DurationLiteral) ms 1`] = `1ms`;

exports[`(DurationLiteral) s 1`] = `1s`;

exports[`(DurationLiteral) year 1`] = `1`;

exports[`(ErrorStatement) basic 1`] = `error404;`;

exports[`(ErrorStatement) with response 1`] = `error404"Not Found";`;

exports[`(ErrorStatement) with variable response 1`] = `error800req.http.Debug;`;

exports[`(ExpressionStatement) with FunCallExpression 1`] = `
log(
  a
);
`;

exports[`(ExpressionStatement) with Identifer 1`] = `vaceline;`;

exports[`(ExpressionStatement) with Literal 1`] = `"string";`;

exports[`(ExpressionStatement) with Member & Identifier 1`] = `req.http.Vaceline;`;

exports[`(File) file 1`] = `"file";`;

exports[`(FunCallExpression) \`if\` func 1`] = `
if(
"a", "b", "c")
`;

exports[`(FunCallExpression) normal 1`] = `
func(
"a")
`;

exports[`(FunCallExpression) with multiple args 1`] = `
func(
"a", "b")
`;

exports[`(FunCallExpression) with whitespace 1`] = `
func(
"a")
`;

exports[`(Identifier) normal 1`] = `vaceline`;

exports[`(IfStatement) basic 1`] = `
if (var.condition) {
  set var.value = 1;
}
`;

exports[`(IfStatement) with else 1`] = `
if (var.condition) {
  set var.value = 1;
}elseset var.value = 2;
`;

exports[`(IfStatement) with else if 1`] = `
if (var.condition) {
  set var.value = 1;
}else{if (!var.condition) {
  set var.value = 2;
}elseset var.value = 0;}
`;

exports[`(ImportStatement) basic 1`] = `module;`;

exports[`(IncludeStatement) basic 1`] = `include "external_library";`;

exports[`(Ip) 6to4 mapping 1`] = `"2002:c000:0204::"`;

exports[`(Ip) 6to4 mapping 2`] = `"::FFFF:192.0.2.4"`;

exports[`(Ip) 6to4 mapping 3`] = `"::1"`;

exports[`(Ip) IPv4 1`] = `"192.0.2.0"`;

exports[`(Ip) IPv4 with cidr 1`] = `"192.0.2.0"`;

exports[`(Ip) IPv6 1`] = `"2001:db8::1"`;

exports[`(Ip) IPv6 with cidr 1`] = `"2001:db8::1"`;

exports[`(Ip) localhost 1`] = `"localhost"`;

exports[`(Ip) unspecified address 1`] = `"::"`;

exports[`(LogStatement) basic 1`] = `
log"log"
req.service_id
"vaceline-log :: "
{"	timestamp_us:"}
time.start.usec
{"	host:"}
regsuball(
req.http.X-Forwarded-Host, {"	"}, "");
`;

exports[`(LogicalExpression) and 1`] = `
req.http.Debug &&
"1"
`;

exports[`(LogicalExpression) combination 1`] = `
req.http.Debug ||
"1" &&
"2"
`;

exports[`(LogicalExpression) or 1`] = `
req.http.Debug ||
"1"
`;

exports[`(Member) basic 1`] = `req.http.Vaceline`;

exports[`(MultilineLiteral) basic 1`] = `
{"
  vaceline
"}
`;

exports[`(NumericLiteral) integer 1`] = `10`;

exports[`(NumericLiteral) zero 1`] = `0`;

exports[`(Program) single handling 1`] = `
sub vcl_recv {
  declare local var.vacelinDebug STRING;
  if (req.http.Vacelin:Some == "Some") {
    add var.vacelinDebug = "Vacelin Debug Log";
  }
}
`;

exports[`(RestartStatement) basic 1`] = `restart;`;

exports[`(ReturnStatement) with parens 1`] = `returnpass;`;

exports[`(ReturnStatement) without parens 1`] = `returnpass;`;

exports[`(SetStatement) addition 1`] = `set var.vacel += "vacel";`;

exports[`(SetStatement) assignment 1`] = `set var.vacel = "vacel";`;

exports[`(SetStatement) division 1`] = `set var.vacel *= "vacel";`;

exports[`(SetStatement) multiplication 1`] = `set var.vacel *= "vacel";`;

exports[`(SetStatement) substraction 1`] = `set var.vacel -= "vacel";`;

exports[`(StringLiteral) basic 1`] = `"string"`;

exports[`(StringLiteral) not a comment 1`] = `"# not a comment"`;

exports[`(StringLiteral) not an inline comment 1`] = `"/* not an inline comment */"`;

exports[`(SubroutineStatement) basic 1`] = `
sub vcl_recv {
  set vaceline = "aaa";
}
`;

exports[`(SyntheticStatement) basic 1`] = `synthetic"";`;

exports[`(TableStatement) single key-value 1`] = `tablevaceline_table"key":"value"`;

exports[`(TableStatement) single key-values 1`] = `
tablevaceline_table"key":"value"
"key2":"value2"
`;

exports[`(TableStatement) with trailing comma 1`] = `
tablevaceline_table"key":"value"
"key2":"value2"
`;

exports[`(UnaryExpression) boolean literal 1`] = `!true`;

exports[`(UnaryExpression) variable 1`] = `!condition`;

exports[`(UnsetStatement) member 1`] = `unset var.value;`;

exports[`(UnsetStatement) variable 1`] = `unset value;`;

exports[`(ValuePair) basic 1`] = `Cookie:Vacelin`;
