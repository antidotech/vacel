export { Node, PlainNode, Position, NodeWithLoc, Location } from './node'
import { buildNode } from './node'

import {
  Program,
  BooleanLiteral,
  StringLiteral,
  MultilineLiteral,
  DurationLiteral,
  NumericLiteral,
  Identifier,
  Ip,
  Member,
  ValuePair,
  BooleanExpression,
  UnaryExpression,
  FunCallExpression,
  ConcatExpression,
  BinaryExpression,
  LogicalExpression,
  ExpressionStatement,
  IncludeStatement,
  ImportStatement,
  CallStatement,
  DeclareStatement,
  AddStatement,
  SetStatement,
  UnsetStatement,
  ReturnStatement,
  ErrorStatement,
  RestartStatement,
  SyntheticStatement,
  LogStatement,
  IfStatement,
  SubroutineStatement,
  AclStatement,
  BackendDefinition,
  BackendStatement,
  TableDefinition,
  TableStatement,
} from './defs'

const nodes = {
  Program,
  BooleanLiteral,
  StringLiteral,
  MultilineLiteral,
  DurationLiteral,
  NumericLiteral,
  Identifier,
  Ip,
  Member,
  ValuePair,
  BooleanExpression,
  UnaryExpression,
  FunCallExpression,
  ConcatExpression,
  BinaryExpression,
  LogicalExpression,
  ExpressionStatement,
  IncludeStatement,
  ImportStatement,
  CallStatement,
  DeclareStatement,
  AddStatement,
  SetStatement,
  UnsetStatement,
  ReturnStatement,
  ErrorStatement,
  RestartStatement,
  SyntheticStatement,
  LogStatement,
  IfStatement,
  SubroutineStatement,
  AclStatement,
  BackendDefinition,
  BackendStatement,
  TableDefinition,
  TableStatement,
} as const

type Nodes = typeof nodes
type NodeName = keyof Nodes

export const d = Object.fromEntries(
  Object.keys(nodes).map((name) => [
    name as NodeName,
    buildNode(nodes[name as NodeName]),
  ])
) as { [Name in NodeName]: Nodes[Name] }
